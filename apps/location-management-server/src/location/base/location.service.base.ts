/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Location as PrismaLocation,
  Comment as PrismaComment,
  Like as PrismaLike,
  LocationImage as PrismaLocationImage,
  Rating as PrismaRating,
} from "@prisma/client";

import { LocalStorageService } from "src/storage/providers/local/local.storage.service";
import { InputJsonValue } from "src/types";
import { FileDownload, FileUpload } from "src/storage/base/storage.types";
import { LocalStorageFile } from "src/storage/providers/local/local.storage.types";

export class LocationServiceBase {
  constructor(
    protected readonly prisma: PrismaService,
    protected readonly localStorageService: LocalStorageService
  ) {}

  async count(args: Omit<Prisma.LocationCountArgs, "select">): Promise<number> {
    return this.prisma.location.count(args);
  }

  async locations(
    args: Prisma.LocationFindManyArgs
  ): Promise<PrismaLocation[]> {
    return this.prisma.location.findMany(args);
  }
  async location(
    args: Prisma.LocationFindUniqueArgs
  ): Promise<PrismaLocation | null> {
    return this.prisma.location.findUnique(args);
  }
  async createLocation(
    args: Prisma.LocationCreateArgs
  ): Promise<PrismaLocation> {
    return this.prisma.location.create(args);
  }
  async updateLocation(
    args: Prisma.LocationUpdateArgs
  ): Promise<PrismaLocation> {
    return this.prisma.location.update(args);
  }
  async deleteLocation(
    args: Prisma.LocationDeleteArgs
  ): Promise<PrismaLocation> {
    return this.prisma.location.delete(args);
  }

  async uploadImage<T extends Prisma.LocationFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.LocationFindUniqueArgs>,
    file: FileUpload
  ): Promise<PrismaLocation> {
    file.filename = `profilePicture-${args.where.id}.${file.filename
      .split(".")
      .pop()}`;
    const containerPath = "image";
    const image = await this.localStorageService.uploadFile(
      file,
      [],
      1000000,
      containerPath
    );

    return await this.prisma.location.update({
      where: args.where,

      data: {
        image: image as InputJsonValue,
      },
    });
  }

  async downloadImage<T extends Prisma.LocationFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.LocationFindUniqueArgs>
  ): Promise<FileDownload> {
    const { image } = await this.prisma.location.findUniqueOrThrow({
      where: args.where,
    });

    return await this.localStorageService.downloadFile(
      image as unknown as LocalStorageFile
    );
  }

  async deleteImage<T extends Prisma.LocationFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.LocationFindUniqueArgs>
  ): Promise<PrismaLocation> {
    const { image } = await this.prisma.location.findUniqueOrThrow({
      where: args.where,
    });

    await this.localStorageService.deleteFile(
      image as unknown as LocalStorageFile
    );

    return await this.prisma.location.update({
      where: args.where,

      data: {
        image: Prisma.DbNull,
      },
    });
  }

  async findComments(
    parentId: string,
    args: Prisma.CommentFindManyArgs
  ): Promise<PrismaComment[]> {
    return this.prisma.location
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .comments(args);
  }

  async findLikes(
    parentId: string,
    args: Prisma.LikeFindManyArgs
  ): Promise<PrismaLike[]> {
    return this.prisma.location
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .likes(args);
  }

  async findLocationImages(
    parentId: string,
    args: Prisma.LocationImageFindManyArgs
  ): Promise<PrismaLocationImage[]> {
    return this.prisma.location
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .locationImages(args);
  }

  async findRatings(
    parentId: string,
    args: Prisma.RatingFindManyArgs
  ): Promise<PrismaRating[]> {
    return this.prisma.location
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .ratings(args);
  }
}
