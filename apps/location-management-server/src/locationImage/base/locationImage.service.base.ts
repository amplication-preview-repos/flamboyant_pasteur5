/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  LocationImage as PrismaLocationImage,
  Location as PrismaLocation,
} from "@prisma/client";
import { LocalStorageService } from "src/storage/providers/local/local.storage.service";
import { InputJsonValue } from "src/types";
import { FileDownload, FileUpload } from "src/storage/base/storage.types";
import { LocalStorageFile } from "src/storage/providers/local/local.storage.types";

export class LocationImageServiceBase {
  constructor(
    protected readonly prisma: PrismaService,
    protected readonly localStorageService: LocalStorageService
  ) {}

  async count(
    args: Omit<Prisma.LocationImageCountArgs, "select">
  ): Promise<number> {
    return this.prisma.locationImage.count(args);
  }

  async locationImages(
    args: Prisma.LocationImageFindManyArgs
  ): Promise<PrismaLocationImage[]> {
    return this.prisma.locationImage.findMany(args);
  }
  async locationImage(
    args: Prisma.LocationImageFindUniqueArgs
  ): Promise<PrismaLocationImage | null> {
    return this.prisma.locationImage.findUnique(args);
  }
  async createLocationImage(
    args: Prisma.LocationImageCreateArgs
  ): Promise<PrismaLocationImage> {
    return this.prisma.locationImage.create(args);
  }
  async updateLocationImage(
    args: Prisma.LocationImageUpdateArgs
  ): Promise<PrismaLocationImage> {
    return this.prisma.locationImage.update(args);
  }
  async deleteLocationImage(
    args: Prisma.LocationImageDeleteArgs
  ): Promise<PrismaLocationImage> {
    return this.prisma.locationImage.delete(args);
  }

  async uploadUrl<T extends Prisma.LocationImageFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.LocationImageFindUniqueArgs>,
    file: FileUpload
  ): Promise<PrismaLocationImage> {
    file.filename = `profilePicture-${args.where.id}.${file.filename
      .split(".")
      .pop()}`;
    const containerPath = "url";
    const url = await this.localStorageService.uploadFile(
      file,
      [],
      1000000,
      containerPath
    );

    return await this.prisma.locationImage.update({
      where: args.where,

      data: {
        url: url as InputJsonValue,
      },
    });
  }

  async downloadUrl<T extends Prisma.LocationImageFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.LocationImageFindUniqueArgs>
  ): Promise<FileDownload> {
    const { url } = await this.prisma.locationImage.findUniqueOrThrow({
      where: args.where,
    });

    return await this.localStorageService.downloadFile(
      url as unknown as LocalStorageFile
    );
  }

  async deleteUrl<T extends Prisma.LocationImageFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.LocationImageFindUniqueArgs>
  ): Promise<PrismaLocationImage> {
    const { url } = await this.prisma.locationImage.findUniqueOrThrow({
      where: args.where,
    });

    await this.localStorageService.deleteFile(
      url as unknown as LocalStorageFile
    );

    return await this.prisma.locationImage.update({
      where: args.where,

      data: {
        url: Prisma.DbNull,
      },
    });
  }

  async getLocation(parentId: string): Promise<PrismaLocation | null> {
    return this.prisma.locationImage
      .findUnique({
        where: { id: parentId },
      })
      .location();
  }
}
